#!/bin/bash
# Parse a forcing file  and create postsript/x11 plots of forcing
# Stand alone version - template file included in script


# Get command line args
usage="
Routine plots forcing fields from the forcing.\"forcingvariable\".[ab] files
Usage: $(basename $0) [-i incr] [-c center] [-s scale] [-p plottype] time1 time2  var
 Where:  time1  is first index of forcing file to plot
         time2  is last  index of forcing file to plot
         var    is the variable to plot ( specifying var as airtmp plots data from forcing.airtmp.[ab])
 Optional: 
         -i incr      where incr is contour interval to use
         -c center    where center is the center contour interval (ignored if incr is not given)
         -s scale     is a scaling factor
         -p plottype  can be set to psp, psl or x11
                  psp is for postscript output (portrait)
                  psl is for postscript output (landscape)
                  x11 is for screen output

The following example shows how to plot air temperature (from forcing.airtmp.[ab] files)
for time index 1 to 12, using a contour interval of .5 and a contour interval center of 5 deg C.
The output is displayed onscreen:
  plotforc.sh -c 5 -i .5 -p x11 1 12 airtmp 
The following example shows how to plot air temperature using autogenerated contours
  plotforc.sh 1 12 airtmp "


incr=
center=
scale=1
plottype=x11
while getopts "i:c:s:p:" options; do
     case $options in
        i ) incr=$OPTARG ;;
        c ) center=$OPTARG ;;
        s ) scale=$OPTARG ;;
        p ) plottype=$OPTARG ;;
        * ) echo -e "$usage"
        exit 1;;
     esac
done
#echo incr=$incr
#echo center=$center
#echo scale=$scale
#echo plottype=$plottype
shift $(($OPTIND - 1))
#echo $@


if [ $# -lt 3 ] ; then
   echo -e "$usage"
   exit 1
fi



ptime=$1
ftime=$2
var=$3


# Parse hycom blkdat
[ ! -f  blkdat.input ]  && { echo "Input file blkdat.input does not exist "; exit 1 ; }
IDM=$(cat blkdat.input | grep idm | sed  "s/^[ ]*//" | cut -f1 )
JDM=$(cat blkdat.input | grep jdm | sed  "s/^[ ]*//" | cut -f1 )
KDM=$(cat blkdat.input | grep kdm | sed  "s/^[ ]*//" | cut -f1 )
FILE="forcing.$var.a"
FILEb="forcing.$var.b"
#echo IDM $IDM
#echo JDM $JDM
#echo KDM $KDM




# Do these files exist?
[ ! -f  $FILE  ]  && echo "Forcing file $FILE does not exist..." && exit
[ ! -f  $FILEb ]  && echo "Forcing file $FILEb does not exist..." && exit

# Test for Routinedir
if [ "${HYCOM_ALL}" == "" ]; then
   echo "Environment variable HYCOM_ALL is empty"
   exit 1
fi

# Test for main routine
FP=${HYCOM_ALL}/plot/src/fp_$plottype 
if [ ! -f $FP ]; then
   echo "Cant find routine $FP"
   exit 1
fi

# Template giving header of input file to fieldproc
TEMPLATE="FILE           
ATLb2.00
IDM     'idm   ' = longitudinal array size
JDM     'jdm   ' = latitudinal  array size
  1     'nperfr' = number of horizontal plots per frame
 20     'lalolb' = spacing of latitude/longitude labels
-10     'lalogr' = spacing of latitude/longitude grid over land (<0 land+sea)
  4     'loclab' = location of the contour label (1=upr,2=lowr,3=lowl,4=upl)
 11     'locbar' = location of the color bar     (1[0-4]=vert,2[0-4]=horiz)
  5     'kpalet' = palete (0=none,1=pastel,2=sst,3=gaudy,4=2tone,5=fc,6=ifc)
  1     'iorign' = i-origin of plotted subregion
  1     'jorign' = j-origin of plotted subregion
  0     'idmp  ' = i-extent of plotted subregion (<=idm; 0 implies idm)
  0     'jdmp  ' = j-extent of plotted subregion (<=jdm; 0 implies jdm)"
echo -e "$TEMPLATE" | sed "s/IDM/$IDM/" | sed "s/JDM/$JDM/" | sed "s/FILE/$FILE/" > forcing_$var.IN



# Skip to correct record
irec2=$ptime
while [ $irec2 -le $ftime ] ; do
   echo " $irec2	'nrec  '" >> forcing_$var.IN

   # Get day From FILEb
   let skip=$irec2+5
   hyctime=$(cat $FILEb | head -n$skip | tail -n1 | sed "s/.*=[ ]*//" | cut -f1 -d" ")
   iday=$(echo $hyctime | awk '{print(int($1))}')
   ihour=$(echo $hyctime $iday | awk '{print(24*($1-$2))}')
   idate=$(~knutali/bin/jultodate  $iday 1901 1 1)

   flagmonth=$(cat $FILEb | head -n$skip | tail -n1 | grep month)
   #echo "HYCTIME line says $(cat $FILEb | head -n$skip | tail -n1)"
   #echo "HYCTIME is $hyctime"
   if [  "$flagmonth" = "" ] ; then
      echo " Var $var At  date  $idate on hour $ihour"        >> forcing_$var.IN
   else
      echo " Var $var for month $irec2"        >> forcing_$var.IN
   fi

   #Scaling factor for plot
   echo "  $scale 	'qscale'" >> forcing_$var.IN

   # both qq and center must be present
   if [ "$incr" != ""  -a "$center" != "" ] ; then
      echo " $incr	'qq    '" >> forcing_$var.IN
      if [ "$center" != "" ] ; then
         echo "  $center	'center'" >> forcing_$var.IN
      fi

   # If not, use auto-generated values
   else
      echo "   0.0	'qq    '" >> forcing_$var.IN
   fi
   let irec2=$irec2+1
done
echo " -1	'nrec  '" >> forcing_$var.IN





#Generate salinity and temperature plots
$FP < forcing_$var.IN  
if [ "$plottype" != "x11" ] ; then
   mv gmeta1.ps forcing_${var}.ps
   echo 
   echo " New file forcing_${var}.ps created"
fi


